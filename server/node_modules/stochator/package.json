{
  "name": "stochator",
  "version": "0.3.3",
  "description": "A little library for generating random values.",
  "main": "build/stochator.js",
  "directories": {},
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/heydenberk/stochator.git"
  },
  "keywords": [
    "random",
    "numbers",
    "values",
    "color",
    "string",
    "integer",
    "array",
    "shuffle",
    "set",
    "markov",
    "chain",
    "generator",
    "prng",
    "normal",
    "distribution"
  ],
  "author": {
    "name": "Eric Heydenberk"
  },
  "license": "MPLv2",
  "readme": "[Download](https://github.com/downloads/heydenberk/stochator/stochator.js) the latest compiled version of stochator.js (0.3.3).\n\n# Stochator\n\n`Stochator` is a tiny library providing for creating a variety of random value generators.\n\nTo create a `Stochator` object, simply invoke the constructor and pass it an `options` object with a `kind` property. If not provided, kind is 'float'.\n\nValid kinds include `float`, `integer`, `set`, `color`, `a-z` and `A-Z`.\n\n## Floating-point decimals\nIt's very easy generate a float between 0 and 1.\n\n````js\nvar generator = new Stochator({});\ngenerator.next(); // 0.9854211050551385\ngenerator.next(); // 0.8784450970124453\ngenerator.next(); // 0.1592887439765036\n````\n\nThis is not very exciting because it simply wraps the built-in `Math.random` method.\n\n\n## Floats from an interval\nSpecifying a min and a max allows us to create random numbers in the interval (min, max), not inclusive.\n\n````js\nvar radianGenerator = new Stochator({\n\tmin: 0,\n\tmax: Math.PI * 2\n});\nradianGenerator.next(); // 3.7084574239999655\nradianGenerator.next(); // 1.021138034566463\nradianGenerator.next(); // 4.012664264853087\n````\n\n## Floats from a normal distribution\nWe can also generate random floats from a normal distribution. Min and max are optional, and when provided will result in truncation of all results outside of [min, max].\n\n````js\nvar testScores = new Stochator({\n\tmean: 75,\n\tstdev: 14,\n\tmin: 0,\n\tmax: 100\n});\ntestScores.next(); // 59.437160028200125\ntestScores.next(); // 80.18612670399554\ntestScores.next(); // 75.81242027226946\n````\n\n## Integers\nFor integers, the interval [min, max] is inclusive. Notice that the optional argument `name` allows us to alias `next` to a more descriptive method name.\n\n````js\nvar die = new Stochator({\n\tkind: \"integer\",\n\tmin: 1,\n\tmax: 6\n}, \"roll\");\ndie.roll(); // 6\ndie.roll(); // 1\ndie.roll(); // 2\n````\n\n## Multiple results\nIf the `next` method (or a method aliased to it) is passed an integer `n`, it will return an n-length array of results. Using the die instance from the previous example:\n\n````js\ndie.roll(1); // [5]\ndie.roll(2); // [5, 3]\ndie.roll(5); // [6, 3, 6, 6, 5]\n````\n\n\n## From sets\nWe can generate random values from arbitary sets.\n\n````js\nvar dayGenerator = new Stochator({\n\tkind: \"set\",\n\tvalues: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n});\ndayGenerator.next(); // friday\ndayGenerator.next(); // monday \ndayGenerator.next(); // monday\n````\n\t\n## From sets with weights\nWhat if we favor the weekend? Well, we can pass `weights`, an array of the same length as `values` consisting of probabilities out of 1 that correspond to `values`.\n\n````js\nvar biasedDayGenerator = new Stochator({\n\tkind: \"set\",\n\tvalues: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"],\n\tweights: [0.1, 0.1, 0.1, 0.1, 0.1, 0.25, 0.25]\n});\nbiasedDayGenerator.next(); // thursday\nbiasedDayGenerator.next(); // sunday \nbiasedDayGenerator.next(); // saturday\n````\n\n## From sets without replacement\nPassing a `replacement` property with a falsy value will result in each random\nvalue generation to be removed from the set.\n\n````js\nvar chores = new Stochator({\n\tkind: \"set\",\n\tvalues: [\"floors\", \"windows\", \"dishes\"],\n\treplacement: false\n});\nvar myChore = chores.next(); // \"windows\"\nvar yourChore = chores.next(); // \"floors\"\nvar hisChore = chores.next(); // \"dishes\"\nvar noOnesChore = chores.next(); // undefined\n````\n\n## From predefined sets\nAt present, predefined sets include `\"a-z\"`, `\"A-Z\"` and `\"color\"`.\n\n````js\nvar colorGenerator = new Stochator({\n\tkind: \"color\"\n});\ncolorGenerator.next(); // { red: 122, green: 200, blue: 121 }\ncolorGenerator.next(); // { red: 129, green: 89, blue: 192 }\ncolorGenerator.next(); // { red: 125, green: 211, blue: 152 }\n````\n\nNote that this example passes an integer argument `n` to `next` which causes\nthe stochator to return an array with the result of `n` calls to the generator.\n\n````js\nvar characterGenerator = new Stochator({\n\tkind: \"a-z\"\n});\ncharacterGenerator.next(25).join(\"\"); // \"uktlbkgufzjiztatmqelawfez\"\ncharacterGenerator.next(25).join(\"\"); // \"wdhygotehcfmrkjyuuovztxla\"\ncharacterGenerator.next(25).join(\"\"); // \"mbjxkhflycpxgdrtyyyevasga\"\n````\n\n## Mutators\nThe constructor accepts an optional final argument which is passed the output\nof the random value generator. Its return value becomes the return value of\nnext or its alias. To generate random boolean values, we can do:\n\n````js\nvar booleanGenerator = new Stochator({\n\tkind: \"integer\",\n\tmin: 0,\n\tmax: 1\n}, Boolean);\n\nbooleanGenerator.next(); // false\nbooleanGenerator.next(); // true\nbooleanGenerator.next(); // true\n````\n\nWe can map the previously mentioned `radianGenerator` to the cosine of its values.\n\n````js\nvar radianSineGenerator = new Stochator({\n\tmin: 0,\n\tmax: Math.PI * 2\n}, Math.cos);\nradianSineGenerator.next(); // -0.31173382958096524\nradianSineGenerator.next(); // -0.6424354006937544\nradianSineGenerator.next(); // 0.6475980728835664\n````\n\nMutators remember their previous result and, at each generation, apply the results of a specified stochator to create a new result.\n\n _(This is functionally equivalent to a Markov chain.)_\n\n````js\nvar drunkardsWalk = new Stochator({\n\tkind: \"integer\",\n\tmin: -1,\n\tmax: 1\n}, function(a, b) { return a + b; });\n\ndrunkardsWalk.value = 0; // Sets the initial value\ndrunkardsWalk.next(10); // [-1, -2, -2, -1, -1, -1, 0, 1, 1, 2]\ndrunkardsWalk.next(10); // [3, 3, 3, 2, 1, 0, -1, 0, 0, 0]\ndrunkardsWalk.next(10); // [0, 1, 0, -1, 0, 0, 1, 2, 1, 1]\n````\n\nLet's model a bank account's balance. How much money might you have after 10 years if you start with $1000, add $1000 every year, and get interest at a random rate between 1% and 5%?\n\n````js\nvar addInterest = function(interestRate, principal) {\n\treturn (principal + 1000) * interestRate;\n};\nvar savingsAccountBalance = new Stochator({\n\tkind: \"float\",\n\tmin: 1.01,\n\tmax: 1.05\n}, addInterest);\n\nsavingsAccountBalance.value = 1000; // Sets the initital value\nsavingsAccountBalance.next(10);\n/*\n[\n\t2096.2402432970703,\n\t3177.3792999428224,\n\t4339.349049328612,\n\t5441.863800747634,\n\t6507.916293297546,\n\t7669.519280743041,\n\t9011.783840249629,\n\t10225.82489660009,\n\t11630.122217972781,\n\t12782.667463879243\n]\n*/\n````\n\n## Multiple generators\nIf the Stochator constructor is passed multiple configuration objects, `next` (or its alias) returns an array of each random generated value.\n\nTo generate a random point, we might do:\n\n````js\nvar x = { kind: 'integer', min: 0, max: 480 };\nvar y = { kind: 'integer', min: 0, max: 360 };\nvar mutator = function(values) {\n\treturn {\n\t\tx: values[0],\n\t\ty: values[1]\n\t};\n};\nvar randomPoint = new Stochator(x, y, mutator);\n\nrandomPoint.next(); // { x: 79, y: 65 }\nrandomPoint.next(); // { x: 151, y: 283 }\nrandomPoint.next(); // { x: 5, y: 253 }\n````\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/heydenberk/stochator/issues"
  },
  "_id": "stochator@0.3.3",
  "dist": {
    "shasum": "841cbb0d573d630e5be3a38ace377e8348bfcd27"
  },
  "_from": "stochator@>= 0.3.3",
  "_resolved": "https://registry.npmjs.org/stochator/-/stochator-0.3.3.tgz"
}
